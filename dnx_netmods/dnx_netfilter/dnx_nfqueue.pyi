
from typing import Callable, NoReturn

NFQCallback = Callable[[CPacket, int], None]

hw_info     = tuple[int, int, str, int]
ip_header   = tuple[int, int, int, int, int, int, int, int, int, int]
tcp_header  = tuple[int, int, int, int, int, int, int, int, int]
udp_header  = tuple[int, int, int, int]
icmp_header = tuple[int, int]


class CPacket:

    def get_hw(self) -> hw_info: ...
    def get_raw_packet(self) -> bytes: ...
    def get_ip_header(self) -> ip_header: ...
    def get_tcp_header(self) -> tcp_header: ...
    def get_udp_header(self) -> udp_header: ...
    def get_icmp_header(self) -> icmp_header: ...
    def get_payload(self) -> bytes: ...
    def update_mark(self, mark: int) -> None: ...
    def accept(self) -> None: ...
    def drop(self) -> None: ...
    def forward(self, queue_num: int) -> None: ...
    def repeat(self) -> None: ...

class NetfilterQueue:

    def nf_run(self) -> NoReturn: ...
    def nf_set(self, queue_num: int) -> int: ...
    def set_proxy_callback(self, func_ref: NFQCallback) -> None: ...
    def nf_break(self) -> None: ...
